// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	models "wanderwallet/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepositoryInterface) CreateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateUser), user)
}

// GetByID mocks base method.
func (m *MockUserRepositoryInterface) GetByID(id uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByID), id)
}

// GetByLogin mocks base method.
func (m *MockUserRepositoryInterface) GetByLogin(login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByLogin), login)
}

// IsLoginExists mocks base method.
func (m *MockUserRepositoryInterface) IsLoginExists(login string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoginExists", login)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLoginExists indicates an expected call of IsLoginExists.
func (mr *MockUserRepositoryInterfaceMockRecorder) IsLoginExists(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoginExists", reflect.TypeOf((*MockUserRepositoryInterface)(nil).IsLoginExists), login)
}

// MockTravelRepositoryInterface is a mock of TravelRepositoryInterface interface.
type MockTravelRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTravelRepositoryInterfaceMockRecorder
}

// MockTravelRepositoryInterfaceMockRecorder is the mock recorder for MockTravelRepositoryInterface.
type MockTravelRepositoryInterfaceMockRecorder struct {
	mock *MockTravelRepositoryInterface
}

// NewMockTravelRepositoryInterface creates a new mock instance.
func NewMockTravelRepositoryInterface(ctrl *gomock.Controller) *MockTravelRepositoryInterface {
	mock := &MockTravelRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTravelRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTravelRepositoryInterface) EXPECT() *MockTravelRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateTravel mocks base method.
func (m *MockTravelRepositoryInterface) CreateTravel(travel *models.Travel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTravel", travel)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTravel indicates an expected call of CreateTravel.
func (mr *MockTravelRepositoryInterfaceMockRecorder) CreateTravel(travel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTravel", reflect.TypeOf((*MockTravelRepositoryInterface)(nil).CreateTravel), travel)
}

// GetTravelByID mocks base method.
func (m *MockTravelRepositoryInterface) GetTravelByID(travelID uint) (*models.Travel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTravelByID", travelID)
	ret0, _ := ret[0].(*models.Travel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTravelByID indicates an expected call of GetTravelByID.
func (mr *MockTravelRepositoryInterfaceMockRecorder) GetTravelByID(travelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTravelByID", reflect.TypeOf((*MockTravelRepositoryInterface)(nil).GetTravelByID), travelID)
}

// MockExpenseRepositoryInterface is a mock of ExpenseRepositoryInterface interface.
type MockExpenseRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseRepositoryInterfaceMockRecorder
}

// MockExpenseRepositoryInterfaceMockRecorder is the mock recorder for MockExpenseRepositoryInterface.
type MockExpenseRepositoryInterfaceMockRecorder struct {
	mock *MockExpenseRepositoryInterface
}

// NewMockExpenseRepositoryInterface creates a new mock instance.
func NewMockExpenseRepositoryInterface(ctrl *gomock.Controller) *MockExpenseRepositoryInterface {
	mock := &MockExpenseRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockExpenseRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseRepositoryInterface) EXPECT() *MockExpenseRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateExpense mocks base method.
func (m *MockExpenseRepositoryInterface) CreateExpense(expense *models.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExpense indicates an expected call of CreateExpense.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) CreateExpense(expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).CreateExpense), expense)
}

// DeleteExpense mocks base method.
func (m *MockExpenseRepositoryInterface) DeleteExpense(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpense", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpense indicates an expected call of DeleteExpense.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) DeleteExpense(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpense", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).DeleteExpense), id)
}

// ExistsByCategoryID mocks base method.
func (m *MockExpenseRepositoryInterface) ExistsByCategoryID(categoryID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByCategoryID", categoryID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsByCategoryID indicates an expected call of ExistsByCategoryID.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) ExistsByCategoryID(categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByCategoryID", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).ExistsByCategoryID), categoryID)
}

// GetExpenseByID mocks base method.
func (m *MockExpenseRepositoryInterface) GetExpenseByID(expenseID uint) (*models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenseByID", expenseID)
	ret0, _ := ret[0].(*models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenseByID indicates an expected call of GetExpenseByID.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) GetExpenseByID(expenseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenseByID", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).GetExpenseByID), expenseID)
}

// GetExpensesByUserID mocks base method.
func (m *MockExpenseRepositoryInterface) GetExpensesByUserID(id uint) ([]models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpensesByUserID", id)
	ret0, _ := ret[0].([]models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpensesByUserID indicates an expected call of GetExpensesByUserID.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) GetExpensesByUserID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpensesByUserID", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).GetExpensesByUserID), id)
}

// GetExpensesByUserTimeAndCategory mocks base method.
func (m *MockExpenseRepositoryInterface) GetExpensesByUserTimeAndCategory(userID uint, fromTime, toTime *time.Time, categoryID *uint) ([]models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpensesByUserTimeAndCategory", userID, fromTime, toTime, categoryID)
	ret0, _ := ret[0].([]models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpensesByUserTimeAndCategory indicates an expected call of GetExpensesByUserTimeAndCategory.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) GetExpensesByUserTimeAndCategory(userID, fromTime, toTime, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpensesByUserTimeAndCategory", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).GetExpensesByUserTimeAndCategory), userID, fromTime, toTime, categoryID)
}

// SumByCategory mocks base method.
func (m *MockExpenseRepositoryInterface) SumByCategory(userID, travelID uint, from, to *time.Time) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumByCategory", userID, travelID, from, to)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumByCategory indicates an expected call of SumByCategory.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) SumByCategory(userID, travelID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumByCategory", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).SumByCategory), userID, travelID, from, to)
}

// SumByDay mocks base method.
func (m *MockExpenseRepositoryInterface) SumByDay(userID, travelID uint, from, to *time.Time) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumByDay", userID, travelID, from, to)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumByDay indicates an expected call of SumByDay.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) SumByDay(userID, travelID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumByDay", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).SumByDay), userID, travelID, from, to)
}

// TotalSum mocks base method.
func (m *MockExpenseRepositoryInterface) TotalSum(userID, travelID uint, from, to *time.Time) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalSum", userID, travelID, from, to)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSum indicates an expected call of TotalSum.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) TotalSum(userID, travelID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSum", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).TotalSum), userID, travelID, from, to)
}

// UpdateExpense mocks base method.
func (m *MockExpenseRepositoryInterface) UpdateExpense(expense *models.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpense", expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpense indicates an expected call of UpdateExpense.
func (mr *MockExpenseRepositoryInterfaceMockRecorder) UpdateExpense(expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpense", reflect.TypeOf((*MockExpenseRepositoryInterface)(nil).UpdateExpense), expense)
}

// MockCategoryRepositoryInterface is a mock of CategoryRepositoryInterface interface.
type MockCategoryRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryInterfaceMockRecorder
}

// MockCategoryRepositoryInterfaceMockRecorder is the mock recorder for MockCategoryRepositoryInterface.
type MockCategoryRepositoryInterfaceMockRecorder struct {
	mock *MockCategoryRepositoryInterface
}

// NewMockCategoryRepositoryInterface creates a new mock instance.
func NewMockCategoryRepositoryInterface(ctrl *gomock.Controller) *MockCategoryRepositoryInterface {
	mock := &MockCategoryRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepositoryInterface) EXPECT() *MockCategoryRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryRepositoryInterface) CreateCategory(category *models.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryRepositoryInterfaceMockRecorder) CreateCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryRepositoryInterface)(nil).CreateCategory), category)
}

// DeleteCategory mocks base method.
func (m *MockCategoryRepositoryInterface) DeleteCategory(categoryID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", categoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoryRepositoryInterfaceMockRecorder) DeleteCategory(categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryRepositoryInterface)(nil).DeleteCategory), categoryID)
}

// GetAllCategories mocks base method.
func (m *MockCategoryRepositoryInterface) GetAllCategories(userID uint) ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", userID)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockCategoryRepositoryInterfaceMockRecorder) GetAllCategories(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockCategoryRepositoryInterface)(nil).GetAllCategories), userID)
}

// GetCategoryByID mocks base method.
func (m *MockCategoryRepositoryInterface) GetCategoryByID(id uint) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", id)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockCategoryRepositoryInterfaceMockRecorder) GetCategoryByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockCategoryRepositoryInterface)(nil).GetCategoryByID), id)
}

// GetCategoryByName mocks base method.
func (m *MockCategoryRepositoryInterface) GetCategoryByName(name string) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", name)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockCategoryRepositoryInterfaceMockRecorder) GetCategoryByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockCategoryRepositoryInterface)(nil).GetCategoryByName), name)
}
