// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"
	dto "wanderwallet/internal/dto"
	models "wanderwallet/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUserServiceInterface) GetUserByID(id uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceInterfaceMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUserByID), id)
}

// Login mocks base method.
func (m *MockUserServiceInterface) Login(login, password string) (*dto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", login, password)
	ret0, _ := ret[0].(*dto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceInterfaceMockRecorder) Login(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceInterface)(nil).Login), login, password)
}

// Register mocks base method.
func (m *MockUserServiceInterface) Register(login, password string) (*dto.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", login, password)
	ret0, _ := ret[0].(*dto.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceInterfaceMockRecorder) Register(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserServiceInterface)(nil).Register), login, password)
}

// MockTravelServiceInterface is a mock of TravelServiceInterface interface.
type MockTravelServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTravelServiceInterfaceMockRecorder
}

// MockTravelServiceInterfaceMockRecorder is the mock recorder for MockTravelServiceInterface.
type MockTravelServiceInterfaceMockRecorder struct {
	mock *MockTravelServiceInterface
}

// NewMockTravelServiceInterface creates a new mock instance.
func NewMockTravelServiceInterface(ctrl *gomock.Controller) *MockTravelServiceInterface {
	mock := &MockTravelServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTravelServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTravelServiceInterface) EXPECT() *MockTravelServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateTravel mocks base method.
func (m *MockTravelServiceInterface) CreateTravel(userID uint, title string, start, end time.Time) (*models.Travel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTravel", userID, title, start, end)
	ret0, _ := ret[0].(*models.Travel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTravel indicates an expected call of CreateTravel.
func (mr *MockTravelServiceInterfaceMockRecorder) CreateTravel(userID, title, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTravel", reflect.TypeOf((*MockTravelServiceInterface)(nil).CreateTravel), userID, title, start, end)
}

// GetTravelByID mocks base method.
func (m *MockTravelServiceInterface) GetTravelByID(travelID uint) (*models.Travel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTravelByID", travelID)
	ret0, _ := ret[0].(*models.Travel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTravelByID indicates an expected call of GetTravelByID.
func (mr *MockTravelServiceInterfaceMockRecorder) GetTravelByID(travelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTravelByID", reflect.TypeOf((*MockTravelServiceInterface)(nil).GetTravelByID), travelID)
}

// MockExpenseServiceInterface is a mock of ExpenseServiceInterface interface.
type MockExpenseServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseServiceInterfaceMockRecorder
}

// MockExpenseServiceInterfaceMockRecorder is the mock recorder for MockExpenseServiceInterface.
type MockExpenseServiceInterfaceMockRecorder struct {
	mock *MockExpenseServiceInterface
}

// NewMockExpenseServiceInterface creates a new mock instance.
func NewMockExpenseServiceInterface(ctrl *gomock.Controller) *MockExpenseServiceInterface {
	mock := &MockExpenseServiceInterface{ctrl: ctrl}
	mock.recorder = &MockExpenseServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseServiceInterface) EXPECT() *MockExpenseServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateExpense mocks base method.
func (m *MockExpenseServiceInterface) CreateExpense(expense *models.Expense) (*models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", expense)
	ret0, _ := ret[0].(*models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpense indicates an expected call of CreateExpense.
func (mr *MockExpenseServiceInterfaceMockRecorder) CreateExpense(expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockExpenseServiceInterface)(nil).CreateExpense), expense)
}

// DeleteExpense mocks base method.
func (m *MockExpenseServiceInterface) DeleteExpense(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpense", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpense indicates an expected call of DeleteExpense.
func (mr *MockExpenseServiceInterfaceMockRecorder) DeleteExpense(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpense", reflect.TypeOf((*MockExpenseServiceInterface)(nil).DeleteExpense), id)
}

// GetExpensesByUserID mocks base method.
func (m *MockExpenseServiceInterface) GetExpensesByUserID(id uint) ([]models.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpensesByUserID", id)
	ret0, _ := ret[0].([]models.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpensesByUserID indicates an expected call of GetExpensesByUserID.
func (mr *MockExpenseServiceInterfaceMockRecorder) GetExpensesByUserID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpensesByUserID", reflect.TypeOf((*MockExpenseServiceInterface)(nil).GetExpensesByUserID), id)
}

// UpdateExpense mocks base method.
func (m *MockExpenseServiceInterface) UpdateExpense(expense *models.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpense", expense)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpense indicates an expected call of UpdateExpense.
func (mr *MockExpenseServiceInterfaceMockRecorder) UpdateExpense(expense interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpense", reflect.TypeOf((*MockExpenseServiceInterface)(nil).UpdateExpense), expense)
}

// MockCategoryServiceInterface is a mock of CategoryServiceInterface interface.
type MockCategoryServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceInterfaceMockRecorder
}

// MockCategoryServiceInterfaceMockRecorder is the mock recorder for MockCategoryServiceInterface.
type MockCategoryServiceInterfaceMockRecorder struct {
	mock *MockCategoryServiceInterface
}

// NewMockCategoryServiceInterface creates a new mock instance.
func NewMockCategoryServiceInterface(ctrl *gomock.Controller) *MockCategoryServiceInterface {
	mock := &MockCategoryServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryServiceInterface) EXPECT() *MockCategoryServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryServiceInterface) CreateCategory(category *models.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryServiceInterfaceMockRecorder) CreateCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryServiceInterface)(nil).CreateCategory), category)
}

// DeleteCategory mocks base method.
func (m *MockCategoryServiceInterface) DeleteCategory(categoryID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", categoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoryServiceInterfaceMockRecorder) DeleteCategory(categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryServiceInterface)(nil).DeleteCategory), categoryID)
}

// GetCategoryByID mocks base method.
func (m *MockCategoryServiceInterface) GetCategoryByID(id uint) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", id)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockCategoryServiceInterfaceMockRecorder) GetCategoryByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockCategoryServiceInterface)(nil).GetCategoryByID), id)
}

// GetCategoryByName mocks base method.
func (m *MockCategoryServiceInterface) GetCategoryByName(name string) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", name)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockCategoryServiceInterfaceMockRecorder) GetCategoryByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockCategoryServiceInterface)(nil).GetCategoryByName), name)
}

// MockAnalyticsServiceInterfase is a mock of AnalyticsServiceInterfase interface.
type MockAnalyticsServiceInterfase struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsServiceInterfaseMockRecorder
}

// MockAnalyticsServiceInterfaseMockRecorder is the mock recorder for MockAnalyticsServiceInterfase.
type MockAnalyticsServiceInterfaseMockRecorder struct {
	mock *MockAnalyticsServiceInterfase
}

// NewMockAnalyticsServiceInterfase creates a new mock instance.
func NewMockAnalyticsServiceInterfase(ctrl *gomock.Controller) *MockAnalyticsServiceInterfase {
	mock := &MockAnalyticsServiceInterfase{ctrl: ctrl}
	mock.recorder = &MockAnalyticsServiceInterfaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsServiceInterfase) EXPECT() *MockAnalyticsServiceInterfaseMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockAnalyticsServiceInterfase) Aggregate(userID, travelID uint, from, to time.Time) (*dto.AnalyticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", userID, travelID, from, to)
	ret0, _ := ret[0].(*dto.AnalyticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockAnalyticsServiceInterfaseMockRecorder) Aggregate(userID, travelID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockAnalyticsServiceInterfase)(nil).Aggregate), userID, travelID, from, to)
}
